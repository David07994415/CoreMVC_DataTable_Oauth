

<h1>Upload  Image</h1>
<div>
	<input type="file" id="Input_Files" multiple>
	<button id="Upload_Btn">Upload Image</button>
</div>

<br>


<h1>Upload and Resize Image (Blob)</h1>
<input type="file" id="imageInput" accept="image/*">
<div>
    <h2>Resized Image:</h2>
    <img id="previewImage" alt="Resized Preview" style="max-width: 100%; height: auto;">
    <button id="GetBase64Url">取得Base64URl</button>
</div>



<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>


    $(document).ready(function () {

        console.log("Loading")
        $('#Upload_Btn').click(function () {

            let formData = new FormData();
            console.log($('#Input_Files'))
            console.log(document.getElementById('Input_Files'))
            console.log(document.getElementById('Input_Files').files)
            console.log(document.getElementById('Input_Files').files.length)

            let files = $('#Input_Files')[0].files; // $('#fileinput').prop('files');


            // 檢查是否有選擇檔案
            if (files.length === 0) {
                alert("請選擇至少一個檔案");
                return;
            }

            // 加入每個檔案到 formData
            for (var i = 0; i < files.length; i++) {
                formData.append('files', files[i]);
            }

            // 上傳檔案 function
           UploadImageFunction(formData)

        });


        function UploadImageFunction(formData) {
            formData.append('id',"test");



            console.log(formData)

            // 使用 for...of 列印每個項目
            for (let pair of formData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }

            // 或使用
            console.log(formData.getAll('id'));

            $.ajax({
                url: '/UploadImage/Upload',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,

                success: function (response) {
                    alert(response.message);
                },
                error: function (error) {
                    alert("上傳失敗");
                }
            });
        
        }


    });

</script>
<script>
    // render image using blob
    const imageInput = document.getElementById('imageInput');
    const previewImage = document.getElementById('previewImage');

    imageInput.addEventListener('change', async (event) => {
        const file = event.target.files[0];
        if (file) {
            const resizedBlob = await resizeImage(file, 300, 300); // Example: Resize to 300x300
            const imageUrl = URL.createObjectURL(resizedBlob);
            previewImage.src = imageUrl;
        }
    });

    function resizeImage(file, maxWidth, maxHeight) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            img.onload = () => {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');

                // Maintain aspect ratio
                let width = img.width;
                let height = img.height;
                if (width > height) {
                    if (width > maxWidth) {
                        height = Math.round((height * maxWidth) / width);
                        width = maxWidth;
                    }
                } else {
                    if (height > maxHeight) {
                        width = Math.round((width * maxHeight) / height);
                        height = maxHeight;
                    }
                }

                // Set canvas size and draw image
                canvas.width = width;
                canvas.height = height;
                ctx.drawImage(img, 0, 0, width, height);

                // Convert to Blob
                canvas.toBlob((blob) => {
                    if (blob) resolve(blob);
                    else reject(new Error('Image resizing failed.'));
                }, 'image/png'); // Output as PNG
            };

            img.onerror = () => reject(new Error('Image loading failed.'));
            img.src = URL.createObjectURL(file); // Load the image
        });
    }

    $("#GetBase64Url").on("click", function () {
        let url = $(`#previewImage`).attr("src")
        LoadBlobObjFromUrl(url);
    });

    async function LoadBlobObjFromUrl(url) {
        let blob = await fetch(url).then(r => r.blob());
        var reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = function () {
            var base64data = reader.result;
            console.log(base64data);
        }
    } 

    async function uploadImageFromBlob() {
        const blobUrl = imgElement.src; // 從 img 的 src 獲取 Blob URL
        const blob = await fetch(blobUrl).then(res => res.blob()); // 將 Blob URL 轉為 Blob

        // 使用 FormData 上傳
        const formData = new FormData();
        formData.append('file', blob, 'resized-image.png'); // 傳遞檔名 (resized-image.png)

        // 發送到後端
        const response = await fetch(backendUrl, {
            method: 'POST',
            body: formData,
        });

        if (response.ok) {
            console.log('Upload successful!');
        } else {
            console.error('Upload failed!');
        }
    }



</script>